
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author usuario
 */
public class pato extends javax.swing.JFrame {

    private int _posNaveX = 0; // posición horizontal de la imagen
    private int _posNaveY = 0; // posición vertical de la imagen

    
    /**
     * Creates new form pato
     */
    public pato() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        
        _posNaveX = lNave.getX();
        _posNaveY = lNave.getY();
        
        CargarImagen("pato.jpg", "img");

        // agrega el KeyListener a la ventana principal
        addKeyListener(new TecladoListener());
        setFocusable(true);
    }

    private void CargarImagen(String imagen, String tipoImagen) {
       
        System.out.println(imagen);

        // Asignamos la imagen a un ImageIcon
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/" + tipoImagen + "/" + imagen));
        
        // Obtenemos la imagen del ImageIcon
        Image image = imageIcon.getImage();
        
        // Transformamos la imagen al tamaño adecuado (el valor negativo indica que se tiene que mantener la proporción)
        Image newimg = image.getScaledInstance(50, -50,  java.awt.Image.SCALE_SMOOTH); // scale it smoothly  
        
        // Creamos un nuevo ImageIcon con la imagen redimensionada
        ImageIcon newImageIcon = new ImageIcon(newimg);
        
        if("img".equals(tipoImagen)) {
            // Asignamos el ImageIcon a la etiqueta de tipo de árbol
            lNave.setIcon(newImageIcon);
        } 
    }

    /**
     * @class TecladoListener
     * Clase que gestiona el manejo del teclado para la nave
     */
    private class TecladoListener implements KeyListener {
    
        @Override
        public void keyPressed(KeyEvent e) {
            
            int tecla = e.getKeyCode();

            // mueve la imagen hacia arriba
            if (tecla == KeyEvent.VK_UP) {
                _posNaveY -= 3;
                lNave.setLocation(_posNaveX, _posNaveY);
            }

            // mueve la imagen hacia abajo
            if (tecla == KeyEvent.VK_DOWN) {
                _posNaveY += 3;
                lNave.setLocation(_posNaveX, _posNaveY);
            }

            // mueve la imagen hacia la izquierda
            if (tecla == KeyEvent.VK_LEFT) {
                _posNaveX -= 3;
                lNave.setLocation(_posNaveX, _posNaveY);
            }

            // mueve la imagen hacia la derecha
            if (tecla == KeyEvent.VK_RIGHT) {
                _posNaveX += 3;
                lNave.setLocation(_posNaveX, _posNaveY);
            }
        }

        @Override
        public void keyTyped(KeyEvent e) {
           
        }

        @Override
        public void keyReleased(KeyEvent e) {
           
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lNave = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(112, Short.MAX_VALUE)
                .addComponent(lNave, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(lNave, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pato().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lNave;
    // End of variables declaration//GEN-END:variables
}
